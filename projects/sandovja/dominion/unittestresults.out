TEST SUCCESSFULLY COMPLETEDTEST SUCCESSFULLY COMPLETEDTEST FAILEDTEST FAILEDTEST SUCCESSFULLY COMPLETEDTEST FAILEDTEST FAILEDTEST SUCCESSFULLY COMPLETEDTEST SUCCESSFULLY COMPLETEDTEST SUCCESSFULLY COMPLETEDTEST SUCCESSFULLY COMPLETEDTEST SUCCESSFULLY COMPLETEDTEST SUCCESSFULLY COMPLETEDTEST SUCCESSFULLY COMPLETEDFile 'dominion.c'
Lines executed:33.44% of 646
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:41
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
    26479:    9:  if (*(int*)a > *(int*)b)
     3495:   10:    return 1;
    22984:   11:  if (*(int*)a < *(int*)b)
    10374:   12:    return -1;
    12610:   13:  return 0;
    26479:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      700:   44:  SelectStream(1);
      700:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     1400:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      700:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    15400:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   154000:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   133000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
    70000:   65:        }
     7000:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      700:   73:  if (numPlayers == 2)
        -:   74:    {
      700:   75:      state->supplyCount[curse] = 10;
      700:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      700:   87:  if (numPlayers == 2)
        -:   88:    {
      700:   89:      state->supplyCount[estate] = 8;
      700:   90:      state->supplyCount[duchy] = 8;
      700:   91:      state->supplyCount[province] = 8;
      700:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      700:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      700:  102:  state->supplyCount[silver] = 40;
      700:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    29400:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   231000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   108500:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    13300:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     1400:  115:		  if (numPlayers == 2){ 
     1400:  116:		    state->supplyCount[i] = 8; 
     1400:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
     1400:  119:		}
        -:  120:	      else
        -:  121:		{
     5600:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     7000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   101500:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   101500:  130:	}
        -:  131:
    14000:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     4200:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     1400:  140:      state->deckCount[i] = 0;
    11200:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     4200:  143:	  state->deck[i][j] = estate;
     4200:  144:	  state->deckCount[i]++;
     4200:  145:	}
    22400:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     9800:  148:	  state->deck[i][j] = copper;
     9800:  149:	  state->deckCount[i]++;		
     9800:  150:	}
     1400:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     4200:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     1400:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
     1400:  160:    }
        -:  161:
        -:  162:  //draw player hands
     4200:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1400:  166:      state->handCount[i] = 0;
     1400:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
     1400:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    39200:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    18900:  178:      state->embargoTokens[i] = 0;
    18900:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      700:  182:  state->outpostPlayed = 0;
      700:  183:  state->phase = 0;
      700:  184:  state->numActions = 1;
      700:  185:  state->numBuys = 1;
      700:  186:  state->playedCardCount = 0;
      700:  187:  state->whoseTurn = 0;
      700:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     8400:  192:  for (it = 0; it < 5; it++){
     3500:  193:    drawCard(state->whoseTurn, state);
     3500:  194:  }
        -:  195:
      700:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      700:  198:  return 0;
      700:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1402:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1402:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     1402:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    32422:  214:  while (state->deckCount[player] > 0) {
    14809:  215:    card = floor(Random() * state->deckCount[player]);
    14809:  216:    newDeck[newDeckPos] = state->deck[player][card];
    14809:  217:    newDeckPos++;
   261444:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   115913:  219:      state->deck[player][i] = state->deck[player][i+1];
   115913:  220:    }
    14809:  221:    state->deckCount[player]--;
        -:  222:  }
    32422:  223:  for (i = 0; i < newDeckPos; i++) {
    14809:  224:    state->deck[player][i] = newDeck[i];
    14809:  225:    state->deckCount[player]++;
    14809:  226:  }
        -:  227:
     1402:  228:  return 0;
     1402:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int playAdventurerCard(struct gameState *state, int temphand[], int z){
        -:  273:
        5:  274:  int drawntreasure = 0;
        5:  275:  int currentPlayer = whoseTurn(state);
        -:  276:  int cardDrawn;
        -:  277:
       30:  278:      while(drawntreasure<2){
        -:  279:      // BUG: introduced to miss empty decks. should be < 1
       10:  280:  if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  281:    shuffle(currentPlayer, state);
    #####:  282:  }
       10:  283:  drawCard(currentPlayer, state);
       10:  284:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       10:  285:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       10:  286:    drawntreasure++;
        -:  287:  else{
    #####:  288:    temphand[z]=cardDrawn;
    #####:  289:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  290:    z++;
        -:  291:  }
        -:  292:      }
       10:  293:      while(z-1>=0){
    #####:  294:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  295:  z=z-1;
        -:  296:      }
        -:  297:
        5:  298:  return 0;
        -:  299:}
        -:  300:
        -:  301:int playSmithyCard(int handPos, struct gameState *state, int currentPlayer){
        -:  302:
        -:  303:  // BUG: introduced to draw 4 cards instead of 3.
       40:  304:  for (int i = 0; i < 3; i++)
        -:  305:  {
       15:  306:    drawCard(currentPlayer, state);
       15:  307:  }
        -:  308:      
        -:  309:      //discard card from hand
        5:  310:  discardCard(handPos, currentPlayer, state, 0);
        -:  311:
        5:  312:  return 0;
        -:  313:}
        -:  314:
        -:  315:int playCouncil_roomCard(int handPos, int currentPlayer, struct gameState *state){
        -:  316:
       50:  317:  for (int i = 0; i < 4; i++)
        -:  318:    {
       20:  319:      drawCard(currentPlayer, state);
       20:  320:    }
        -:  321:      
        -:  322:    //+1 Buy
        5:  323:    state->numBuys++;
        -:  324:      
        -:  325:    // Each other player draws a card
       30:  326:    for (int i = 0; i < state->numPlayers; i++)
        -:  327:    {
       10:  328:      if ( i != currentPlayer )
        -:  329:        {
        5:  330:          drawCard(i, state);
        5:  331:        }
       10:  332:    }
        -:  333:      
        -:  334:    //put played card in played card pile
        5:  335:    discardCard(handPos, currentPlayer, state, 0);
        -:  336:      
        5:  337:    return 0;
        -:  338:}
        -:  339:
        -:  340:int playFeastCard(int currentPlayer, struct gameState *state, int choice1, int temphand[]){
        -:  341:
        -:  342:  int i, x;
        -:  343:  //Backup hand
       70:  344:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
       30:  345:    temphand[i] = state->hand[currentPlayer][i];//Backup card
       30:  346:    state->hand[currentPlayer][i] = -1;//Set to nothing
       30:  347:  }
        -:  348:
        -:  349:  //Update Coins for Buy
        5:  350:  updateCoins(currentPlayer, state, 5);
        5:  351:  x = 1;//Condition to loop on
       20:  352:  while( x == 1) {//Buy one card
        5:  353:    if (supplyCount(choice1, state) <= 0){
        -:  354:      if (DEBUG)
        -:  355:        printf("None of that card left, sorry!\n");
        -:  356:
        -:  357:      if (DEBUG){
        -:  358:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  359:      }
    #####:  360:    }
        -:  361:     
        5:  362:    else if (state->coins < getCost(choice1)){
    #####:  363:      printf("That card is too expensive!\n");
        -:  364:
        -:  365:      if (DEBUG){
        -:  366:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  367:      }
    #####:  368:    }
        -:  369:    else{
        -:  370:
        -:  371:      if (DEBUG){
        -:  372:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  373:      }
        -:  374:
        5:  375:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
        5:  376:      x = 0;//No more buying cards
        -:  377:
        -:  378:    if (DEBUG){
        -:  379:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  380:    }
        -:  381:
        -:  382:  }
        -:  383:      }     
        -:  384:
        -:  385:      //Reset Hand
       70:  386:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
       30:  387:        state->hand[currentPlayer][i] = temphand[i];
       30:  388:        temphand[i] = -1;
       30:  389:      }
        -:  390:
        5:  391:  return 0;
        -:  392:}
        -:  393:
        -:  394:int playBaronCard(struct gameState *state, int currentPlayer, int choice1){
        -:  395:
    #####:  396:  state->numBuys++;//Increase buys by 1!
    #####:  397:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  398:  int p = 0;//Iterator for hand!
    #####:  399:  int card_not_discarded = 1;//Flag for discard set!
    #####:  400:  while(card_not_discarded){
    #####:  401:    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  402:      state->coins += 4;//Add 4 coins to the amount of coins
    #####:  403:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  404:      state->discardCount[currentPlayer]++;
    #####:  405:      for (;p < state->handCount[currentPlayer]; p++){
    #####:  406:        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  407:      }
    #####:  408:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  409:      state->handCount[currentPlayer]--;
    #####:  410:      card_not_discarded = 0;//Exit the loop
    #####:  411:    }
    #####:  412:    else if (p > state->handCount[currentPlayer]){
        -:  413:      if(DEBUG) {
        -:  414:        printf("No estate cards in your hand, invalid choice\n");
        -:  415:        printf("Must gain an estate if there are any\n");
        -:  416:      }
    #####:  417:      if (supplyCount(estate, state) > 0){
    #####:  418:        gainCard(estate, state, 0, currentPlayer);
    #####:  419:        state->supplyCount[estate]--;//Decrement estates
    #####:  420:        if (supplyCount(estate, state) == 0){
    #####:  421:    isGameOver(state);
    #####:  422:        }
    #####:  423:      }
    #####:  424:      card_not_discarded = 0;//Exit the loop
    #####:  425:    }
        -:  426:          
        -:  427:    else{
    #####:  428:      p++;//Next card
        -:  429:    }
        -:  430:  }
    #####:  431:      }
        -:  432:          
        -:  433:      else{
    #####:  434:  if (supplyCount(estate, state) > 0){
    #####:  435:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  436:    state->supplyCount[estate]--;//Decrement Estates
    #####:  437:    if (supplyCount(estate, state) == 0){
    #####:  438:      isGameOver(state);
    #####:  439:    }
    #####:  440:  }
        -:  441:      }
        -:  442:      
    #####:  443:  return 0;
        -:  444:}
        -:  445:
        -:  446:
        -:  447:
        -:  448:int buyCard(int supplyPos, struct gameState *state) {
        -:  449:  int who;
        -:  450:
        -:  451:  if (DEBUG){
        -:  452:    printf("Entering buyCard...\n");
        -:  453:  }
        -:  454:
        -:  455:  // I don't know what to do about the phase thing.
        -:  456:
      680:  457:  who = state->whoseTurn;
        -:  458:
      680:  459:  if (state->numBuys < 1){
        -:  460:    if (DEBUG)
        -:  461:      printf("You do not have any buys left\n");
    #####:  462:    return -1;
      680:  463:  } else if (supplyCount(supplyPos, state) <1){
        -:  464:    if (DEBUG)
        -:  465:      printf("There are not any of that type of card left\n");
    #####:  466:    return -1;
      680:  467:  } else if (state->coins < getCost(supplyPos)){
        -:  468:    if (DEBUG) 
        -:  469:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
      330:  470:    return -1;
        -:  471:  } else {
      350:  472:    state->phase=1;
        -:  473:    //state->supplyCount[supplyPos]--;
      350:  474:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  475:  
      350:  476:    state->coins = (state->coins) - (getCost(supplyPos));
      350:  477:    state->numBuys--;
        -:  478:    if (DEBUG)
        -:  479:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  480:  }
        -:  481:
        -:  482:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  483:  //state->discardCount[who]++;
        -:  484:    
      350:  485:  return 0;
      680:  486:}
        -:  487:
        -:  488:int numHandCards(struct gameState *state) {
    #####:  489:  return state->handCount[ whoseTurn(state) ];
        -:  490:}
        -:  491:
        -:  492:int handCard(int handPos, struct gameState *state) {
    #####:  493:  int currentPlayer = whoseTurn(state);
    #####:  494:  return state->hand[currentPlayer][handPos];
        -:  495:}
        -:  496:
        -:  497:int supplyCount(int card, struct gameState *state) {
     1040:  498:  return state->supplyCount[card];
        -:  499:}
        -:  500:
        -:  501:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  502:  int i;
    #####:  503:  int count = 0;
        -:  504:
    #####:  505:  for (i = 0; i < state->deckCount[player]; i++)
        -:  506:    {
    #####:  507:      if (state->deck[player][i] == card) count++;
    #####:  508:    }
        -:  509:
    #####:  510:  for (i = 0; i < state->handCount[player]; i++)
        -:  511:    {
    #####:  512:      if (state->hand[player][i] == card) count++;
    #####:  513:    }
        -:  514:
    #####:  515:  for (i = 0; i < state->discardCount[player]; i++)
        -:  516:    {
    #####:  517:      if (state->discard[player][i] == card) count++;
    #####:  518:    }
        -:  519:
    #####:  520:  return count;
        -:  521:}
        -:  522:
        -:  523:int whoseTurn(struct gameState *state) {
        5:  524:  return state->whoseTurn;
        -:  525:}
        -:  526:
        -:  527:int endTurn(struct gameState *state) {
        -:  528:  int k;
        -:  529:  int i;
    #####:  530:  int currentPlayer = whoseTurn(state);
        -:  531:  
        -:  532:  //Discard hand
    #####:  533:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  534:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  535:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  536:  }
    #####:  537:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  538:    
        -:  539:  //Code for determining the player
    #####:  540:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  541:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  542:  }
        -:  543:  else{
    #####:  544:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  545:  }
        -:  546:
    #####:  547:  state->outpostPlayed = 0;
    #####:  548:  state->phase = 0;
    #####:  549:  state->numActions = 1;
    #####:  550:  state->coins = 0;
    #####:  551:  state->numBuys = 1;
    #####:  552:  state->playedCardCount = 0;
    #####:  553:  state->handCount[state->whoseTurn] = 0;
        -:  554:
        -:  555:  //int k; move to top
        -:  556:  //Next player draws hand
    #####:  557:  for (k = 0; k < 5; k++){
    #####:  558:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  559:  }
        -:  560:
        -:  561:  //Update money
    #####:  562:  updateCoins(state->whoseTurn, state , 0);
        -:  563:
    #####:  564:  return 0;
        -:  565:}
        -:  566:
        -:  567:int isGameOver(struct gameState *state) {
        -:  568:  int i;
        -:  569:  int j;
        -:  570:	
        -:  571:  //if stack of Province cards is empty, the game ends
    #####:  572:  if (state->supplyCount[province] == 0)
        -:  573:    {
    #####:  574:      return 1;
        -:  575:    }
        -:  576:
        -:  577:  //if three supply pile are at 0, the game ends
    #####:  578:  j = 0;
    #####:  579:  for (i = 0; i < 25; i++)
        -:  580:    {
    #####:  581:      if (state->supplyCount[i] == 0)
        -:  582:	{
    #####:  583:	  j++;
    #####:  584:	}
    #####:  585:    }
    #####:  586:  if ( j >= 3)
        -:  587:    {
    #####:  588:      return 1;
        -:  589:    }
        -:  590:
    #####:  591:  return 0;
    #####:  592:}
        -:  593:
        -:  594:int scoreFor (int player, struct gameState *state) {
        -:  595:
        -:  596:  int i;
    #####:  597:  int score = 0;
        -:  598:  //score from hand
    #####:  599:  for (i = 0; i < state->handCount[player]; i++)
        -:  600:    {
    #####:  601:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  602:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  603:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  604:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  605:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  606:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  607:    }
        -:  608:
        -:  609:  //score from discard
    #####:  610:  for (i = 0; i < state->discardCount[player]; i++)
        -:  611:    {
    #####:  612:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  613:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  614:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  615:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  616:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  617:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  618:    }
        -:  619:
        -:  620:  //score from deck
    #####:  621:  for (i = 0; i < state->discardCount[player]; i++)
        -:  622:    {
    #####:  623:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  624:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  625:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  626:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  627:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  628:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  629:    }
        -:  630:
    #####:  631:  return score;
        -:  632:}
        -:  633:
        -:  634:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  635:  int i;	
        -:  636:  int j;
        -:  637:  int highScore;
        -:  638:  int currentPlayer;
        -:  639:
        -:  640:  //get score for each player
    #####:  641:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  642:    {
        -:  643:      //set unused player scores to -9999
    #####:  644:      if (i >= state->numPlayers)
        -:  645:	{
    #####:  646:	  players[i] = -9999;
    #####:  647:	}
        -:  648:      else
        -:  649:	{
    #####:  650:	  players[i] = scoreFor (i, state);
        -:  651:	}
    #####:  652:    }
        -:  653:
        -:  654:  //find highest score
    #####:  655:  j = 0;
    #####:  656:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  657:    {
    #####:  658:      if (players[i] > players[j])
        -:  659:	{
    #####:  660:	  j = i;
    #####:  661:	}
    #####:  662:    }
    #####:  663:  highScore = players[j];
        -:  664:
        -:  665:  //add 1 to players who had less turns
    #####:  666:  currentPlayer = whoseTurn(state);
    #####:  667:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  668:    {
    #####:  669:      if ( players[i] == highScore && i > currentPlayer )
        -:  670:	{
    #####:  671:	  players[i]++;
    #####:  672:	}
    #####:  673:    }
        -:  674:
        -:  675:  //find new highest score
    #####:  676:  j = 0;
    #####:  677:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  678:    {
    #####:  679:      if ( players[i] > players[j] )
        -:  680:	{
    #####:  681:	  j = i;
    #####:  682:	}
    #####:  683:    }
    #####:  684:  highScore = players[j];
        -:  685:
        -:  686:  //set winners in array to 1 and rest to 0
    #####:  687:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  688:    {
    #####:  689:      if ( players[i] == highScore )
        -:  690:	{
    #####:  691:	  players[i] = 1;
    #####:  692:	}
        -:  693:      else
        -:  694:	{
    #####:  695:	  players[i] = 0;
        -:  696:	}
    #####:  697:    }
        -:  698:
    #####:  699:  return 0;
        -:  700:}
        -:  701:
        -:  702:int drawCard(int player, struct gameState *state)
        -:  703:{	int count;
        -:  704:  int deckCounter;
     5550:  705:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  706:    
        -:  707:    //Step 1 Shuffle the discard pile back into a deck
        -:  708:    int i;
        -:  709:    //Move discard to deck
     1622:  710:    for (i = 0; i < state->discardCount[player];i++){
      809:  711:      state->deck[player][i] = state->discard[player][i];
      809:  712:      state->discard[player][i] = -1;
      809:  713:    }
        -:  714:
        2:  715:    state->deckCount[player] = state->discardCount[player];
        2:  716:    state->discardCount[player] = 0;//Reset discard
        -:  717:
        -:  718:    //Shufffle the deck
        2:  719:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  720:   
        -:  721:    if (DEBUG){//Debug statements
        -:  722:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  723:    }
        -:  724:    
        2:  725:    state->discardCount[player] = 0;
        -:  726:
        -:  727:    //Step 2 Draw Card
        2:  728:    count = state->handCount[player];//Get current player's hand count
        -:  729:    
        -:  730:    if (DEBUG){//Debug statements
        -:  731:      printf("Current hand count: %d\n", count);
        -:  732:    }
        -:  733:    
        2:  734:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  735:
        2:  736:    if (deckCounter == 0)
    #####:  737:      return -1;
        -:  738:
        2:  739:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  740:    state->deckCount[player]--;
        2:  741:    state->handCount[player]++;//Increment hand count
        2:  742:  }
        -:  743:
        -:  744:  else{
     5548:  745:    int count = state->handCount[player];//Get current hand count for player
        -:  746:    int deckCounter;
        -:  747:    if (DEBUG){//Debug statements
        -:  748:      printf("Current hand count: %d\n", count);
        -:  749:    }
        -:  750:
     5548:  751:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5548:  752:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5548:  753:    state->deckCount[player]--;
     5548:  754:    state->handCount[player]++;//Increment hand count
        -:  755:  }
        -:  756:
     5550:  757:  return 0;
     5550:  758:}
        -:  759:
        -:  760:int getCost(int cardNumber)
        -:  761:{
     1575:  762:  switch( cardNumber ) 
        -:  763:    {
        -:  764:    case curse:
      109:  765:      return 0;
        -:  766:    case estate:
       98:  767:      return 2;
        -:  768:    case duchy:
       89:  769:      return 5;
        -:  770:    case province:
       80:  771:      return 8;
        -:  772:    case copper:
      104:  773:      return 0;
        -:  774:    case silver:
       95:  775:      return 3;
        -:  776:    case gold:
       86:  777:      return 6;
        -:  778:    case adventurer:
       86:  779:      return 6;
        -:  780:    case council_room:
       89:  781:      return 5;
        -:  782:    case feast:
       92:  783:      return 4;
        -:  784:    case gardens:
       92:  785:      return 4;
        -:  786:    case mine:
       89:  787:      return 5;
        -:  788:    case remodel:
       92:  789:      return 4;
        -:  790:    case smithy:
       92:  791:      return 4;
        -:  792:    case village:
       95:  793:      return 3;
        -:  794:    case baron:
       92:  795:      return 4;
        -:  796:    case great_hall:
       95:  797:      return 3;
        -:  798:    case minion:
    #####:  799:      return 5;
        -:  800:    case steward:
    #####:  801:      return 3;
        -:  802:    case tribute:
    #####:  803:      return 5;
        -:  804:    case ambassador:
    #####:  805:      return 3;
        -:  806:    case cutpurse:
    #####:  807:      return 4;
        -:  808:    case embargo: 
    #####:  809:      return 2;
        -:  810:    case outpost:
    #####:  811:      return 5;
        -:  812:    case salvager:
    #####:  813:      return 4;
        -:  814:    case sea_hag:
    #####:  815:      return 4;
        -:  816:    case treasure_map:
    #####:  817:      return 4;
        -:  818:    }
        -:  819:	
    #####:  820:  return -1;
     1575:  821:}
        -:  822:
        -:  823:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  824:{
        -:  825:  int i;
        -:  826:  int j;
        -:  827:  int k;
        -:  828:  int x;
        -:  829:  int index;
    #####:  830:  int currentPlayer = whoseTurn(state);
    #####:  831:  int nextPlayer = currentPlayer + 1;
        -:  832:
    #####:  833:  int tributeRevealedCards[2] = {-1, -1};
        -:  834:  int temphand[MAX_HAND];// moved above the if statement
    #####:  835:  int drawntreasure=0;
        -:  836:  int cardDrawn;
    #####:  837:  int z = 0;// this is the counter for the temp hand
    #####:  838:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  839:    nextPlayer = 0;
    #####:  840:  }
        -:  841:
        -:  842:  //uses switch to select card and perform actions
    #####:  843:  switch( card ) 
        -:  844:    {
        -:  845:    case adventurer:
        -:  846:
    #####:  847:      return playAdventurerCard(state, temphand, z);
        -:  848:			
        -:  849:    case council_room:
        -:  850:      //+4 Cards
    #####:  851:      return playCouncil_roomCard(handPos, currentPlayer, state);
        -:  852:			
        -:  853:    case feast:
        -:  854:      //gain card with cost up to 5
        -:  855:      //Backup hand
    #####:  856:      return playFeastCard(currentPlayer, state, choice1, temphand);
        -:  857:			
        -:  858:    case gardens:
    #####:  859:      return -1;
        -:  860:			
        -:  861:    case mine:
    #####:  862:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  863:
    #####:  864:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  865:	{
    #####:  866:	  return -1;
        -:  867:	}
        -:  868:		
    #####:  869:      if (choice2 > treasure_map || choice2 < curse)
        -:  870:	{
    #####:  871:	  return -1;
        -:  872:	}
        -:  873:
    #####:  874:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  875:	{
    #####:  876:	  return -1;
        -:  877:	}
        -:  878:
    #####:  879:      gainCard(choice2, state, 2, currentPlayer);
        -:  880:
        -:  881:      //discard card from hand
    #####:  882:      discardCard(handPos, currentPlayer, state, 0);
        -:  883:
        -:  884:      //discard trashed card
    #####:  885:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  886:	{
    #####:  887:	  if (state->hand[currentPlayer][i] == j)
        -:  888:	    {
    #####:  889:	      discardCard(i, currentPlayer, state, 0);			
    #####:  890:	      break;
        -:  891:	    }
    #####:  892:	}
        -:  893:			
    #####:  894:      return 0;
        -:  895:			
        -:  896:    case remodel:
    #####:  897:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  898:
    #####:  899:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  900:	{
    #####:  901:	  return -1;
        -:  902:	}
        -:  903:
    #####:  904:      gainCard(choice2, state, 0, currentPlayer);
        -:  905:
        -:  906:      //discard card from hand
    #####:  907:      discardCard(handPos, currentPlayer, state, 0);
        -:  908:
        -:  909:      //discard trashed card
    #####:  910:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  911:	{
    #####:  912:	  if (state->hand[currentPlayer][i] == j)
        -:  913:	    {
    #####:  914:	      discardCard(i, currentPlayer, state, 0);			
    #####:  915:	      break;
        -:  916:	    }
    #####:  917:	}
        -:  918:
        -:  919:
    #####:  920:      return 0;
        -:  921:		// + 3 cards
        -:  922:    case smithy:
        -:  923:
    #####:  924:      return playSmithyCard(handPos, state, currentPlayer);
        -:  925:		
        -:  926:    case village:
        -:  927:      //+1 Card
    #####:  928:      drawCard(currentPlayer, state);
        -:  929:			
        -:  930:      //+2 Actions
    #####:  931:      state->numActions = state->numActions + 2;
        -:  932:			
        -:  933:      //discard played card from hand
    #####:  934:      discardCard(handPos, currentPlayer, state, 0);
    #####:  935:      return 0;
        -:  936:		
        -:  937:    case baron:
        -:  938:      
    #####:  939:      return playBaronCard(currentPlayer, state, choice1);
        -:  940:		
        -:  941:    case great_hall:
        -:  942:      //+1 Card
    #####:  943:      drawCard(currentPlayer, state);
        -:  944:			
        -:  945:      //+1 Actions
    #####:  946:      state->numActions++;
        -:  947:			
        -:  948:      //discard card from hand
    #####:  949:      discardCard(handPos, currentPlayer, state, 0);
    #####:  950:      return 0;
        -:  951:		
        -:  952:    case minion:
        -:  953:      //+1 action
    #####:  954:      state->numActions++;
        -:  955:			
        -:  956:      //discard card from hand
    #####:  957:      discardCard(handPos, currentPlayer, state, 0);
        -:  958:			
    #####:  959:      if (choice1)		//+2 coins
        -:  960:	{
    #####:  961:	  state->coins = state->coins + 2;
    #####:  962:	}
        -:  963:			
    #####:  964:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  965:	{
        -:  966:	  //discard hand
    #####:  967:	  while(numHandCards(state) > 0)
        -:  968:	    {
    #####:  969:	      discardCard(handPos, currentPlayer, state, 0);
        -:  970:	    }
        -:  971:				
        -:  972:	  //draw 4
    #####:  973:	  for (i = 0; i < 4; i++)
        -:  974:	    {
    #####:  975:	      drawCard(currentPlayer, state);
    #####:  976:	    }
        -:  977:				
        -:  978:	  //other players discard hand and redraw if hand size > 4
    #####:  979:	  for (i = 0; i < state->numPlayers; i++)
        -:  980:	    {
    #####:  981:	      if (i != currentPlayer)
        -:  982:		{
    #####:  983:		  if ( state->handCount[i] > 4 )
        -:  984:		    {
        -:  985:		      //discard hand
    #####:  986:		      while( state->handCount[i] > 0 )
        -:  987:			{
    #####:  988:			  discardCard(handPos, i, state, 0);
        -:  989:			}
        -:  990:							
        -:  991:		      //draw 4
    #####:  992:		      for (j = 0; j < 4; j++)
        -:  993:			{
    #####:  994:			  drawCard(i, state);
    #####:  995:			}
    #####:  996:		    }
    #####:  997:		}
    #####:  998:	    }
        -:  999:				
    #####: 1000:	}
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case steward:
    #####: 1004:      if (choice1 == 1)
        -: 1005:	{
        -: 1006:	  //+2 cards
    #####: 1007:	  drawCard(currentPlayer, state);
    #####: 1008:	  drawCard(currentPlayer, state);
    #####: 1009:	}
    #####: 1010:      else if (choice1 == 2)
        -: 1011:	{
        -: 1012:	  //+2 coins
    #####: 1013:	  state->coins = state->coins + 2;
    #####: 1014:	}
        -: 1015:      else
        -: 1016:	{
        -: 1017:	  //trash 2 cards in hand
    #####: 1018:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1019:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1020:	}
        -: 1021:			
        -: 1022:      //discard card from hand
    #####: 1023:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1024:      return 0;
        -: 1025:		
        -: 1026:    case tribute:
    #####: 1027:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1028:	if (state->deckCount[nextPlayer] > 0){
    #####: 1029:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1030:	  state->deckCount[nextPlayer]--;
    #####: 1031:	}
    #####: 1032:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1033:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1034:	  state->discardCount[nextPlayer]--;
    #####: 1035:	}
        -: 1036:	else{
        -: 1037:	  //No Card to Reveal
        -: 1038:	  if (DEBUG){
        -: 1039:	    printf("No cards to reveal\n");
        -: 1040:	  }
        -: 1041:	}
    #####: 1042:      }
        -: 1043:	    
        -: 1044:      else{
    #####: 1045:	if (state->deckCount[nextPlayer] == 0){
    #####: 1046:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1047:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1048:	    state->deckCount[nextPlayer]++;
    #####: 1049:	    state->discard[nextPlayer][i] = -1;
    #####: 1050:	    state->discardCount[nextPlayer]--;
    #####: 1051:	  }
        -: 1052:			    
    #####: 1053:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1054:	} 
    #####: 1055:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1056:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1057:	state->deckCount[nextPlayer]--;
    #####: 1058:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1060:	state->deckCount[nextPlayer]--;
        -: 1061:      }    
        -: 1062:		       
    #####: 1063:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1064:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1065:	state->playedCardCount++;
    #####: 1066:	tributeRevealedCards[1] = -1;
    #####: 1067:      }
        -: 1068:
    #####: 1069:      for (i = 0; i <= 2; i ++){
    #####: 1070:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1071:	  state->coins += 2;
    #####: 1072:	}
        -: 1073:		    
    #####: 1074:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1075:	  drawCard(currentPlayer, state);
    #####: 1076:	  drawCard(currentPlayer, state);
    #####: 1077:	}
        -: 1078:	else{//Action Card
    #####: 1079:	  state->numActions = state->numActions + 2;
        -: 1080:	}
    #####: 1081:      }
        -: 1082:	    
    #####: 1083:      return 0;
        -: 1084:		
        -: 1085:    case ambassador:
    #####: 1086:      j = 0;		//used to check if player has enough cards to discard
        -: 1087:
    #####: 1088:      if (choice2 > 2 || choice2 < 0)
        -: 1089:	{
    #####: 1090:	  return -1;				
        -: 1091:	}
        -: 1092:
    #####: 1093:      if (choice1 == handPos)
        -: 1094:	{
    #####: 1095:	  return -1;
        -: 1096:	}
        -: 1097:
    #####: 1098:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1099:	{
    #####: 1100:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1101:	    {
    #####: 1102:	      j++;
    #####: 1103:	    }
    #####: 1104:	}
    #####: 1105:      if (j < choice2)
        -: 1106:	{
    #####: 1107:	  return -1;				
        -: 1108:	}
        -: 1109:
        -: 1110:      if (DEBUG) 
        -: 1111:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1112:
        -: 1113:      //increase supply count for choosen card by amount being discarded
    #####: 1114:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1115:			
        -: 1116:      //each other player gains a copy of revealed card
    #####: 1117:      for (i = 0; i < state->numPlayers; i++)
        -: 1118:	{
    #####: 1119:	  if (i != currentPlayer)
        -: 1120:	    {
    #####: 1121:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1122:	    }
    #####: 1123:	}
        -: 1124:
        -: 1125:      //discard played card from hand
    #####: 1126:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1127:
        -: 1128:      //trash copies of cards returned to supply
    #####: 1129:      for (j = 0; j < choice2; j++)
        -: 1130:	{
    #####: 1131:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1132:	    {
    #####: 1133:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1134:		{
    #####: 1135:		  discardCard(i, currentPlayer, state, 1);
    #####: 1136:		  break;
        -: 1137:		}
    #####: 1138:	    }
    #####: 1139:	}			
        -: 1140:
    #####: 1141:      return 0;
        -: 1142:		
        -: 1143:    case cutpurse:
        -: 1144:
    #####: 1145:      updateCoins(currentPlayer, state, 2);
    #####: 1146:      for (i = 0; i < state->numPlayers; i++)
        -: 1147:	{
    #####: 1148:	  if (i != currentPlayer)
        -: 1149:	    {
    #####: 1150:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1151:		{
    #####: 1152:		  if (state->hand[i][j] == copper)
        -: 1153:		    {
    #####: 1154:		      discardCard(j, i, state, 0);
    #####: 1155:		      break;
        -: 1156:		    }
    #####: 1157:		  if (j == state->handCount[i])
        -: 1158:		    {
    #####: 1159:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1160:			{
        -: 1161:			  if (DEBUG)
        -: 1162:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1163:			}	
    #####: 1164:		      break;
        -: 1165:		    }		
    #####: 1166:		}
        -: 1167:					
    #####: 1168:	    }
        -: 1169:				
    #####: 1170:	}				
        -: 1171:
        -: 1172:      //discard played card from hand
    #####: 1173:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1174:
    #####: 1175:      return 0;
        -: 1176:
        -: 1177:		
        -: 1178:    case embargo: 
        -: 1179:      //+2 Coins
    #####: 1180:      state->coins = state->coins + 2;
        -: 1181:			
        -: 1182:      //see if selected pile is in play
    #####: 1183:      if ( state->supplyCount[choice1] == -1 )
        -: 1184:	{
    #####: 1185:	  return -1;
        -: 1186:	}
        -: 1187:			
        -: 1188:      //add embargo token to selected supply pile
    #####: 1189:      state->embargoTokens[choice1]++;
        -: 1190:			
        -: 1191:      //trash card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case outpost:
        -: 1196:      //set outpost flag
    #####: 1197:      state->outpostPlayed++;
        -: 1198:			
        -: 1199:      //discard card
    #####: 1200:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1201:      return 0;
        -: 1202:		
        -: 1203:    case salvager:
        -: 1204:      //+1 buy
    #####: 1205:      state->numBuys++;
        -: 1206:			
    #####: 1207:      if (choice1)
        -: 1208:	{
        -: 1209:	  //gain coins equal to trashed card
    #####: 1210:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1211:	  //trash card
    #####: 1212:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1213:	}
        -: 1214:			
        -: 1215:      //discard card
    #####: 1216:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case sea_hag:
    #####: 1220:      for (i = 0; i < state->numPlayers; i++){
    #####: 1221:	if (i != currentPlayer){
    #####: 1222:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1223:	  state->discardCount[i]++;
    #####: 1224:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1225:	}
    #####: 1226:      }
    #####: 1227:      return 0;
        -: 1228:		
        -: 1229:    case treasure_map:
        -: 1230:      //search hand for another treasure_map
    #####: 1231:      index = -1;
    #####: 1232:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1233:	{
    #####: 1234:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1235:	    {
    #####: 1236:	      index = i;
    #####: 1237:	      break;
        -: 1238:	    }
    #####: 1239:	}
    #####: 1240:      if (index > -1)
        -: 1241:	{
        -: 1242:	  //trash both treasure cards
    #####: 1243:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1244:	  discardCard(index, currentPlayer, state, 1);
        -: 1245:
        -: 1246:	  //gain 4 Gold cards
    #####: 1247:	  for (i = 0; i < 4; i++)
        -: 1248:	    {
    #####: 1249:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1250:	    }
        -: 1251:				
        -: 1252:	  //return success
    #####: 1253:	  return 1;
        -: 1254:	}
        -: 1255:			
        -: 1256:      //no second treasure_map found in hand
    #####: 1257:      return -1;
        -: 1258:    }
        -: 1259:	
    #####: 1260:  return -1;
    #####: 1261:}
        -: 1262:
        -: 1263:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1264:{
        -: 1265:	
        -: 1266:  //if card is not trashed, added to Played pile 
       10: 1267:  if (trashFlag < 1)
        -: 1268:    {
        -: 1269:      //add card to played pile
       10: 1270:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       10: 1271:      state->playedCardCount++;
       10: 1272:    }
        -: 1273:	
        -: 1274:  //set played card to -1
       10: 1275:  state->hand[currentPlayer][handPos] = -1;
        -: 1276:	
        -: 1277:  //remove card from player's hand
       10: 1278:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1279:    {
        -: 1280:      //reduce number of cards in hand
    #####: 1281:      state->handCount[currentPlayer]--;
    #####: 1282:    }
       10: 1283:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1284:    {
        -: 1285:      //reduce number of cards in hand
    #####: 1286:      state->handCount[currentPlayer]--;
    #####: 1287:    }
        -: 1288:  else 	
        -: 1289:    {
        -: 1290:      //replace discarded card with last card in hand
       10: 1291:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1292:      //set last card to -1
       10: 1293:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1294:      //reduce number of cards in hand
       10: 1295:      state->handCount[currentPlayer]--;
        -: 1296:    }
        -: 1297:	
       10: 1298:  return 0;
        -: 1299:}
        -: 1300:
        -: 1301:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1302:{
        -: 1303:  //Note: supplyPos is enum of choosen card
        -: 1304:	
        -: 1305:  //check if supply pile is empty (0) or card is not used in game (-1)
      355: 1306:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1307:    {
    #####: 1308:      return -1;
        -: 1309:    }
        -: 1310:	
        -: 1311:  //added card for [whoseTurn] current player:
        -: 1312:  // toFlag = 0 : add to discard
        -: 1313:  // toFlag = 1 : add to deck
        -: 1314:  // toFlag = 2 : add to hand
        -: 1315:
      355: 1316:  if (toFlag == 1)
        -: 1317:    {
    #####: 1318:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1319:      state->deckCount[player]++;
    #####: 1320:    }
      355: 1321:  else if (toFlag == 2)
        -: 1322:    {
    #####: 1323:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1324:      state->handCount[player]++;
    #####: 1325:    }
        -: 1326:  else
        -: 1327:    {
      355: 1328:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      355: 1329:      state->discardCount[player]++;
        -: 1330:    }
        -: 1331:	
        -: 1332:  //decrease number in supply pile
      355: 1333:  state->supplyCount[supplyPos]--;
        -: 1334:	 
      355: 1335:  return 0;
      355: 1336:}
        -: 1337:
        -: 1338:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1339:{
        -: 1340:  int i;
        -: 1341:	
        -: 1342:  //reset coin count
      710: 1343:  state->coins = 0;
        -: 1344:
        -: 1345:  //add coins for each Treasure card in player's hand
     8520: 1346:  for (i = 0; i < state->handCount[player]; i++)
        -: 1347:    {
     3550: 1348:      if (state->hand[player][i] == copper)
        -: 1349:	{
     2800: 1350:	  state->coins += 1;
     2800: 1351:	}
      750: 1352:      else if (state->hand[player][i] == silver)
        -: 1353:	{
    #####: 1354:	  state->coins += 2;
    #####: 1355:	}
      750: 1356:      else if (state->hand[player][i] == gold)
        -: 1357:	{
    #####: 1358:	  state->coins += 3;
    #####: 1359:	}	
     3550: 1360:    }	
        -: 1361:
        -: 1362:  //add bonus
      710: 1363:  state->coins += bonus;
        -: 1364:
      710: 1365:  return 0;
        -: 1366:}
        -: 1367:
        -: 1368:
        -: 1369://end of dominion.c
        -: 1370:
